server:
  port: 8001

spring:
  application:
    name: concert-service

  datasource:
    url: jdbc:mysql://mysql-concert-service.mysql-concert-ns.svc.cluster.local:3306/concert-db
    username: root
    password: root

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    generate-ddl: false

  data:
    redis:
      host: redis-service.redis-ns.svc.cluster.local
      port: 6379
      timeout: 2000

logging:
  level:
    com.example.concertservice: DEBUG
  pattern:
    correlation: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'

management:
#  tracing:
#    sampling:
#      probability: 1.0
#    propagation:
#      consume: B3
#      produce: B3
#  zipkin:
#    tracing:
#      endpoint: http://zipkin-service:9411/api/v2/spans
  endpoints:
    web:
      exposure:
        include: "*"
  metrics:
    tags:
      application: ${spring.application.name}
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true

resilience4j:
  circuitbreaker:
    configs:
      default:
        failure-rate-threshold: 50
        slow-call-rate-threshold: 80
        slow-call-duration-threshold: 10s
        permitted-number-of-calls-in-half-open-state: 3
        max-wait-duration-in-half-open-state: 0
        sliding-window-type: COUNT_BASED
        sliding-window-size: 10
        minimum-number-of-calls: 10
        wait-duration-in-open-state: 10s
    instances:
      default-circuitbreaker:
        base-config: default

springdoc:
  api-docs:
    version: openapi_3_1
    enabled: true
  enable-spring-security: true
  default-consumes-media-type: application/json
  default-produces-media-type: application/json

  feign:
    client:
      config:
        default:
          loggerLevel: FULL