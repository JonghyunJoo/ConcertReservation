server:
  port: 8002

spring:
  application:
    name: seat-service
  datasource:
    url: jdbc:mysql://mysql-seat-service.mysql-seat-ns.svc.cluster.local:3306/seat-db
    username: root
    password: root

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    generate-ddl: false

  kafka:
    producer:
      bootstrap-servers: kafka-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: consumerGroup
      auto-offset-reset: earliest
      bootstrap-servers: kafka-cluster-kafka-bootstrap.kafka.svc.cluster.local:9092
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer

management:
#  tracing:
#    sampling:
#      probability: 1.0
#    propagation:
#      consume: B3
#      produce: B3
#  zipkin:
#    tracing:
#      endpoint: http://zipkin-service:9411/api/v2/spans
  endpoints:
    web:
      exposure:
        include: "*"
  metrics:
    tags:
      application: ${spring.application.name}
  endpoint:
    health:
      show-details: always
logging:
  level:
    com.example.seatservice: DEBUG
